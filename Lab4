#include <omp.h>
#include <iostream>
#include <time.h>
using namespace std;


const int N = 10000000;

#define PRINT_MATRIX false
#define PRINT_RESULT false
#define SHOW_ITERATIONS false

void sequence_func()
{
	int i;
	int* A;
	int* B;
	int* C;
	double result = 0.1;

	A = new int[N];
	B = new int[N];
	C = new int[N];


	for (i = 0; i < N; i++) {
		A[i] = rand() % 10 + 1;
		B[i] = rand() % 10 + 1;
		C[i] = rand() % 10 + 1;
	}
#pragma region prints
	for (i = 0; i < N; i++) {
		if (PRINT_MATRIX)
			cout << A[i] << " ";
	}
	if (PRINT_MATRIX) {
		cout << " \n";
	}
	for (i = 0; i < N; i++) {
		if (PRINT_MATRIX)
			cout << B[i] << " ";
	}
	if (PRINT_MATRIX)
		cout << " \n";
	for (i = 0; i < N; i++) {
		if (PRINT_MATRIX)
			cout << C[i] << " ";
	}
	if (PRINT_MATRIX)
		cout << " \n";
#pragma endregion

#pragma region code
	clock_t start1 = clock();
	for (i = 0; i < N; i++) {
		if (A[i] % 2 == 0) {
			result += (double)B[i] / (double)C[i];
			if (SHOW_ITERATIONS)
				cout << result << endl;
		}
		else
		{
			result += (double)A[i] + B[i];
			if (SHOW_ITERATIONS)
				cout << result << endl;
		}
	}

#pragma endregion
	clock_t end1 = clock();
	printf("\nTime of operating without MP:  %f", difftime(end1, start1));
	cout << "\nResult: " << result << endl;
	
	result = 0.1;

	clock_t start = clock();

#pragma omp parallel shared(A,B,C)
	{
#pragma omp for private(i) reduction(+:result)
		for (i = 0; i < N; i++)
		{
			if (A[i] % 2 == 0)
			{
				result += (double)B[i] / (double)C[i];
				if (SHOW_ITERATIONS)
					cout << result << endl;
			}
			else
			{
				result += (double)A[i] + B[i];
				if (SHOW_ITERATIONS)
					cout << result << endl;
			}

		}
	}

	
		clock_t end = clock();
	printf("\nTime of operating with MP:  %f", difftime(end, start));
	cout << "\nResult: " << result << endl;

	result = 0.1;
	 start = clock();
#pragma omp parallel shared(A,B,C)
	{
#pragma omp for private(i) 
		for (i = 0; i < N; i++)
		{	
		#pragma omp critical
			{
				if (A[i] % 2 == 0)
				{
					result += (double)B[i] / (double)C[i];
					if (SHOW_ITERATIONS)
						cout << result << endl;
				}
				else
				{
					result += (double)A[i] + B[i];
					if (SHOW_ITERATIONS)
						cout << result << endl;
				}
			}
		}
	}


	end = clock();
	printf("\nTime of operating with critical MP:  %f", difftime(end, start));
	cout << "\nResult: " << result << endl;

}


int main() {
	int i;

	
	sequence_func();

	return 0;
}
